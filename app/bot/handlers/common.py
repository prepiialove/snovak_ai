from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()

from app.bot.keyboards.main_menu import main_menu_keyboard, dynamic_keyboard
from app.services.ai import get_service_data_from_text
from app.services.crud import create_service
from sqlalchemy.ext.asyncio import AsyncSession
import asyncio

class AdminContact(StatesGroup):
    waiting_for_message = State()
    waiting_for_service_details = State()

@router.message(CommandStart())
async def cmd_start(message: Message, session: AsyncSession):
    """
    This handler receives messages with `/start` command
    """
    welcome_text = (
        f"–í—ñ—Ç–∞—é, {message.from_user.full_name}!\n\n"
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –ø–æ –º—ñ—Å—Ç—É –°–Ω–æ–≤—Å—å–∫. "
        "–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?"
    )
    await message.answer(welcome_text, reply_markup=await main_menu_keyboard(session))

@router.message(F.text)
async def handle_dynamic_buttons(message: Message, session: AsyncSession):
    """
    Handles all dynamic buttons.
    """
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=await main_menu_keyboard(session))
        return

    keyboard = await dynamic_keyboard(session, message.text)
    
    # If the keyboard has more than just a "Back" button, it's a submenu
    if len(keyboard.keyboard) > 1:
        await message.answer(f"–†–æ–∑–¥—ñ–ª: {message.text}", reply_markup=keyboard)
    else:
        # Otherwise, it's a leaf node, so we can treat it as a category
        # This is a simplification. For a real app, you'd have a more robust way
        # to distinguish between submenus and action buttons.
        await message.answer(f"–¢—É—Ç –±—É–¥—É—Ç—å –ø–æ—Å–ª—É–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{message.text}'")

@router.message(F.text.in_({"‚ùì –ü–∏—Ç–∞–Ω–Ω—è", "üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è", "üò° –°–∫–∞—Ä–≥–∞", "ü§ù –°–ø—ñ–≤–ø—Ä–∞—Ü—è"}))
async def handle_admin_contact(message: Message, state: FSMContext):
    await state.update_data(contact_type=message.text)
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.set_state(AdminContact.waiting_for_message)

@router.message(AdminContact.waiting_for_message)
async def process_admin_message(message: Message, state: FSMContext):
    # Here you would typically forward the message to the admin.
    # For now, we'll just confirm receipt.
    data = await state.get_data()
    contact_type = data.get('contact_type')
    
    # Simulate forwarding to admin
    admin_chat_id = 123456789 # Replace with your admin's chat ID
    await message.forward(chat_id=admin_chat_id)
    
    await message.answer("–î—è–∫—É—é, –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.clear()

@router.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Å–≤–æ—é –ø–æ—Å–ª—É–≥—É")
async def add_own_service(message: Message, state: FSMContext):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞—à—É –ø–æ—Å–ª—É–≥—É –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n\n–ù–∞–∑–≤–∞: –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂ '–£ –ü–µ—Ç—Ä–æ–≤–∏—á–∞'\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –ê–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å\n–ê–¥—Ä–µ—Å–∞: –≤—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞, 10\n–¢–µ–ª–µ—Ñ–æ–Ω: 0991234567\n–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: –ü–Ω-–°–± 9:00-18:00")
    await state.set_state(AdminContact.waiting_for_service_details)

@router.message(AdminContact.waiting_for_service_details)
async def process_service_details(message: Message, state: FSMContext, session: AsyncSession):
    await message.answer("–û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...")
    
    service_data = await asyncio.to_thread(get_service_data_from_text, message.text)
    
    if not service_data:
        await message.answer("–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å —Ñ–æ—Ä–º–∞—Ç—É.")
        return

    await create_service(session, service_data.model_dump())
    
    await message.answer("–î—è–∫—É—é! –í–∞—à–∞ –ø–æ—Å–ª—É–≥–∞ –±—É–ª–∞ –¥–æ–¥–∞–Ω–∞ —ñ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—è–≤–∏—Ç—å—Å—è –≤ –±–æ—Ç—ñ.")
    await state.clear()