import asyncio
import io
from aiogram import Router, F, Bot
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from app.services.crud import search_services
from app.services.ai import get_search_query_from_text, translate_to_ukrainian, recognize_speech_from_bytes
from app.bot.handlers.category import show_service_details

router = Router()

# We need to exclude category names from the search handler
# to avoid conflicts with the category handler.
CATEGORY_NAMES = [
    "üíÖ –ü–æ—Å–ª—É–≥–∏ –∫—Ä–∞—Å–∏",
    "üöó –ê–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å",
    "üè† –†–µ–º–æ–Ω—Ç —Ç–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è",
    "üöå –†–æ–∑–∫–ª–∞–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"
]

@router.message(F.voice)
async def handle_voice_message(message: Message, session: AsyncSession, bot: Bot):
    """
    This handler will be called for any voice message.
    It downloads the voice message, converts it to text, and then uses the search logic.
    """
    await message.answer("üé§ –†–æ–∑–ø—ñ–∑–Ω–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    voice_file = await bot.get_file(message.voice.file_id)
    voice_ogg = io.BytesIO()
    await bot.download_file(voice_file.file_path, voice_ogg)
    
    # Recognize speech in a separate thread
    recognized_text = await asyncio.to_thread(recognize_speech_from_bytes, voice_ogg.getvalue())

    if not recognized_text:
        await message.answer("–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    await message.answer(f"–í–∏ —Å–∫–∞–∑–∞–ª–∏: \"{recognized_text}\". –®—É–∫–∞—é...")
    
    await _process_search_query(message, session, bot, recognized_text)


@router.message(F.text, ~F.text.in_(CATEGORY_NAMES))
async def handle_search_query(message: Message, session: AsyncSession, bot: Bot):
    """
    This handler will be called for any text message that is not a category button.
    It uses AI to get search keywords and then searches the database.
    """
    await message.answer("üîé –•–≤–∏–ª–∏–Ω–∫—É, —à—É–∫–∞—é –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º...")
    await _process_search_query(message, session, bot, message.text)


async def _process_search_query(message: Message, session: AsyncSession, bot: Bot, text: str):
    # Translate the message to Ukrainian in a separate thread to avoid blocking
    ukrainian_text = await asyncio.to_thread(translate_to_ukrainian, text)

    # Get search query from the translated text in a separate thread
    search_query = await asyncio.to_thread(get_search_query_from_text, ukrainian_text)

    if not search_query:
        await message.answer("–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏.")
        return

    services = await search_services(session, search_query)

    if not services:
        await message.answer(f"ü§∑ –ù–∞ –∂–∞–ª—å, –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{search_query}' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.")
        return

    await message.answer(f"<b>–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{search_query}':</b>")

    for service in services:
        # We can reuse the function from the category handler to display the service details
        # by creating a "fake" message with the command.
        fake_message = message
        fake_message.text = f"/service_{service.id}"
        await show_service_details(fake_message, session, bot)